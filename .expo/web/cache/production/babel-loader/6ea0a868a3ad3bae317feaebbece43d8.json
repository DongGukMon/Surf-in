{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import Constants from'expo-constants';import React,{useState}from'react';import*as Notifications from'expo-notifications';import firebase from'firebase';import firebaseInit from\"./firebaseInit\";firebaseInit();export default function notification(result){var expoToken,_await$Notifications$,existingStatus,finalStatus,_await$Notifications$2,status,token;return _regeneratorRuntime.async(function notification$(_context){while(1){switch(_context.prev=_context.next){case 0:expoToken=\"\";if(!Constants.isDevice){_context.next=22;break;}_context.next=4;return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());case 4:_await$Notifications$=_context.sent;existingStatus=_await$Notifications$.status;finalStatus=existingStatus;if(!(existingStatus!=='granted')){_context.next=13;break;}_context.next=10;return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());case 10:_await$Notifications$2=_context.sent;status=_await$Notifications$2.status;finalStatus=status;case 13:if(!(finalStatus!=='granted')){_context.next=16;break;}alert('Failed to get push token for push notification!');return _context.abrupt(\"return\");case 16:_context.next=18;return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());case 18:token=_context.sent.data;expoToken=token;_context.next=23;break;case 22:alert('Must use physical device for Push Notifications');case 23:firebase.database().ref('pushToken/'+result.user.uid).set({expoToken:expoToken});console.log(expoToken);console.log(result.user.uid);if(Platform.OS==='android'){Notifications.setNotificationChannelAsync('default',{name:'default',importance:Notifications.AndroidImportance.MAX,vibrationPattern:[0,250,250,250],lightColor:'#FF231F7C'});}case 27:case\"end\":return _context.stop();}}},null,null,null,Promise);};export function pushNearFriends(nearFirends){var toPush;return _regeneratorRuntime.async(function pushNearFriends$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:toPush=[];firebase.database().ref('pushToken').once('value',function _callee(snapshot){return _regeneratorRuntime.async(function _callee$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:nearFirends.map(function(current){toPush.push(snapshot.val()[current[\"uid\"]][\"expoToken\"]);});_context2.next=3;return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send',{method:'POST',headers:{Accept:'application/json','Content-Type':'application/json',Authorization:key=\"AAAAWzEP8AQ:APA91bFkAehXNlIstOSFEUE44ObvNmp0Ki5PWp4Fik2Mtf181rnsURDCdFCO1JSvMNfMbDOSvabCow1MkwRmJ0kZZETRBSZGTrwwEps_EHW4uvHaLLK2SITFi11U7cvuf86td2IEQeRV\"},body:JSON.stringify({to:toPush,sound:'default',title:\"반가워요\",body:\"주변에 있으시군요!\"})}));case 3:case\"end\":return _context2.stop();}}},null,null,null,Promise);});case 2:case\"end\":return _context3.stop();}}},null,null,null,Promise);}","map":{"version":3,"sources":["C:/Users/Note/Desktop/surfin/src/notification.js"],"names":["Constants","React","useState","Notifications","firebase","firebaseInit","notification","result","expoToken","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","token","data","database","ref","user","uid","set","console","log","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","pushNearFriends","nearFirends","toPush","once","snapshot","map","current","push","val","fetch","method","headers","Accept","Authorization","key","body","JSON","stringify","to","sound","title"],"mappings":"4DAAA,MAAOA,CAAAA,SAAP,KAAsB,gBAAtB,CACA,MAAOC,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CACA,MAAO,GAAKC,CAAAA,aAAZ,KAA+B,oBAA/B,CACA,MAAOC,CAAAA,QAAP,KAAqB,UAArB,CACA,MAAOC,CAAAA,YAAP,sBAEAA,YAAY,GAEZ,cAAe,SAAeC,CAAAA,YAAf,CAA4BC,MAA5B,2NACPC,SADO,CACK,EADL,KAGPR,SAAS,CAACS,QAHH,2EAIkCN,aAAa,CAACO,mBAAd,EAJlC,6CAISC,cAJT,uBAICC,MAJD,CAKHC,WALG,CAKWF,cALX,MAMHA,cAAc,GAAK,SANhB,6EAOkBR,aAAa,CAACW,uBAAd,EAPlB,+CAOCF,MAPD,wBAOCA,MAPD,CAQPC,WAAW,CAAGD,MAAd,CARO,aAUHC,WAAW,GAAK,SAVb,2BAWPE,KAAK,CAAC,iDAAD,CAAL,CAXO,2FAccZ,aAAa,CAACa,qBAAd,EAdd,UAcDC,KAdC,eAcqDC,IAdrD,CAePV,SAAS,CAAGS,KAAZ,CAfO,+BAiBPF,KAAK,CAAC,iDAAD,CAAL,CAjBO,QAoBXX,QAAQ,CACPe,QADD,GAECC,GAFD,CAEK,aAAeb,MAAM,CAACc,IAAP,CAAYC,GAFhC,EAGCC,GAHD,CAGK,CACDf,SAAS,CAATA,SADC,CAHL,EAMAgB,OAAO,CAACC,GAAR,CAAYjB,SAAZ,EACAgB,OAAO,CAACC,GAAR,CAAYlB,MAAM,CAACc,IAAP,CAAYC,GAAxB,EAEA,GAAII,QAAQ,CAACC,EAAT,GAAgB,SAApB,CAA+B,CAC3BxB,aAAa,CAACyB,2BAAd,CAA0C,SAA1C,CAAqD,CACrDC,IAAI,CAAE,SAD+C,CAErDC,UAAU,CAAE3B,aAAa,CAAC4B,iBAAd,CAAgCC,GAFS,CAGrDC,gBAAgB,CAAE,CAAC,CAAD,CAAI,GAAJ,CAAS,GAAT,CAAc,GAAd,CAHmC,CAIrDC,UAAU,CAAE,WAJyC,CAArD,EAMH,CApCU,sEAwCd,CAED,MAAO,SAAeC,CAAAA,eAAf,CAA+BC,WAA/B,yIAEGC,MAFH,CAEW,EAFX,CAGHjC,QAAQ,CAACe,QAAT,GAAoBC,GAApB,CAAwB,WAAxB,EAAqCkB,IAArC,CAA0C,OAA1C,CAAkD,iBAAMC,QAAN,sHAC9CH,WAAW,CAACI,GAAZ,CAAgB,SAACC,OAAD,CAAW,CACvBJ,MAAM,CAACK,IAAP,CAAYH,QAAQ,CAACI,GAAT,GAAeF,OAAO,CAAC,KAAD,CAAtB,EAA+B,WAA/B,CAAZ,EACH,CAFD,EAD8C,kDAKxCG,KAAK,CAAC,sCAAD,CAAyC,CAChDC,MAAM,CAAE,MADwC,CAEhDC,OAAO,CAAE,CACPC,MAAM,CAAE,kBADD,CAEP,eAAgB,kBAFT,CAGPC,aAAa,CAAEC,GAAG,2JAHX,CAFuC,CAOhDC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACnBC,EAAE,CAAEhB,MADe,CAEnBiB,KAAK,CAAE,SAFY,CAGnBC,KAAK,CAAE,MAHY,CAInBL,IAAI,CAAE,YAJa,CAAf,CAP0C,CAAzC,CALmC,wEAAlD,EAHG","sourcesContent":["import Constants from 'expo-constants';\r\nimport React, {useState} from 'react';\r\nimport * as Notifications from 'expo-notifications';\r\nimport firebase from 'firebase';\r\nimport firebaseInit from './firebaseInit';\r\n\r\nfirebaseInit()\r\n\r\nexport default async function notification(result) {\r\n    var expoToken = \"\";\r\n    \r\n    if (Constants.isDevice) {\r\n        const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n        let finalStatus = existingStatus;\r\n        if (existingStatus !== 'granted') {\r\n        const { status } = await Notifications.requestPermissionsAsync();\r\n        finalStatus = status;\r\n        }\r\n        if (finalStatus !== 'granted') {\r\n        alert('Failed to get push token for push notification!');\r\n        return;\r\n        }\r\n        const token = (await Notifications.getExpoPushTokenAsync()).data;\r\n        expoToken = token;\r\n    } else {\r\n        alert('Must use physical device for Push Notifications');\r\n    }\r\n    \r\n    firebase\r\n    .database()\r\n    .ref('pushToken/' + result.user.uid)\r\n    .set({\r\n        expoToken\r\n    });\r\n    console.log(expoToken);\r\n    console.log(result.user.uid);\r\n    \r\n    if (Platform.OS === 'android') {\r\n        Notifications.setNotificationChannelAsync('default', {\r\n        name: 'default',\r\n        importance: Notifications.AndroidImportance.MAX,\r\n        vibrationPattern: [0, 250, 250, 250],\r\n        lightColor: '#FF231F7C',\r\n        });\r\n    }\r\n    \r\n\r\n\r\n};\r\n\r\nexport async function pushNearFriends(nearFirends) {\r\n  \r\n    const toPush =[] \r\n    firebase.database().ref('pushToken').once('value',async(snapshot)=>{\r\n        nearFirends.map((current)=>{\r\n            toPush.push(snapshot.val()[current[\"uid\"]][\"expoToken\"])\r\n        })\r\n\r\n        await fetch('https://exp.host/--/api/v2/push/send', {\r\n            method: 'POST',\r\n            headers: {\r\n              Accept: 'application/json',\r\n              'Content-Type': 'application/json',\r\n              Authorization: key=`AAAAWzEP8AQ:APA91bFkAehXNlIstOSFEUE44ObvNmp0Ki5PWp4Fik2Mtf181rnsURDCdFCO1JSvMNfMbDOSvabCow1MkwRmJ0kZZETRBSZGTrwwEps_EHW4uvHaLLK2SITFi11U7cvuf86td2IEQeRV`,\r\n            },\r\n            body: JSON.stringify({\r\n              to: toPush,\r\n              sound: 'default',\r\n              title: \"반가워요\",\r\n              body: \"주변에 있으시군요!\",\r\n              }),\r\n            },\r\n        )\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}