{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";var _excluded=[\"accessToken\"];import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{CodedError}from'@unimodules/core';import*as AppAuth from'expo-app-auth';import Constants from'expo-constants';import Platform from\"react-native-web/dist/exports/Platform\";var isInExpo=Constants.appOwnership==='expo';export function getPlatformGUID(config){var clientId=config.clientId;var iosClientId=isInExpo?config.iosClientId:config.iosStandaloneAppClientId;var androidClientId=isInExpo?config.androidClientId:config.androidStandaloneAppClientId;var platformClientId=Platform.select({ios:iosClientId,android:androidClientId,default:config.clientId})||clientId;if(typeof iosClientId==='string'&&typeof androidClientId==='string'&&iosClientId===androidClientId){throw new CodedError('ERR_GOOGLE_CONFIG','Keys for Android and iOS cannot be the same value. Ensure you are linking the client IDs matching the given platforms in the Google APIs console: https://console.developers.google.com/apis/credentials');}if(!platformClientId){throw new CodedError('ERR_GOOGLE_CONFIG','Please provide the appropriate client ID. See the documentation for more details https://docs.expo.io/versions/latest/sdk/google/#loginasync');}var guid=guidFromClientId(platformClientId);return guid;}var PROJECT_ID_LENGTH=32;function isValidGUID(guid){var components=guid.split('-');if(components.length!==2){return{isValid:false,reason:\"`\"+guid+\"` must be a string of numbers and an alphanumeric string \"+PROJECT_ID_LENGTH+\" characters long, joined with a hyphen.\"};}var projectNumber=components[0];var projectId=components[1];if(isNaN(+projectNumber)){var hashedProjectId=Array(PROJECT_ID_LENGTH).fill('x');return{isValid:false,reason:\"`\"+projectNumber+\"-\"+hashedProjectId+\"` project number must be a string of numbers.\"};}if(!projectId.match('^[a-zA-Z0-9]+$')){var hashedProjectNumber=Array(projectNumber.length).fill('x');return{isValid:false,reason:\"`\"+hashedProjectNumber+\"-\"+projectId+\"` project ID must be an alphanumeric string \"+PROJECT_ID_LENGTH+\" characters long.\"};}return{isValid:true};}function guidFromClientId(clientId){var clientIdComponents=clientId.split('.').filter(function(component){return component.includes('-');});var guid=clientIdComponents[0];var _isValidGUID=isValidGUID(guid),isValid=_isValidGUID.isValid,reason=_isValidGUID.reason;if(!isValid){throw new CodedError('ERR_GOOGLE_GUID',reason+' Please ensure you copied the client ID correctly.');}return guid;}export function logInAsync(config){var userDefinedScopes,requiredScopes,scopes,guid,clientId,redirectUrl,extras,logInResult,userInfoResponse,userInfo,message;return _regeneratorRuntime.async(function logInAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(config.behavior!==undefined){console.warn(\"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior. `behavior` deprecated in SDK 34\");}if(config.webClientId!==undefined){console.warn('Deprecated: You will need to use expo-google-sign-in to do server side authentication outside of the Expo client');}userDefinedScopes=config.scopes||[];requiredScopes=[].concat(_toConsumableArray(userDefinedScopes),['profile','email','openid']);scopes=_toConsumableArray(new Set(requiredScopes));guid=getPlatformGUID(config);clientId=guid+\".apps.googleusercontent.com\";redirectUrl=config.redirectUrl?config.redirectUrl:AppAuth.OAuthRedirect+\":/oauth2redirect/google\";extras={};if(config.language){extras.hl=config.language;}if(config.loginHint){extras.login_hint=config.loginHint;}_context.prev=11;_context.next=14;return _regeneratorRuntime.awrap(AppAuth.authAsync({issuer:'https://accounts.google.com',scopes:scopes,redirectUrl:redirectUrl,clientId:clientId,additionalParameters:extras}));case 14:logInResult=_context.sent;_context.next=17;return _regeneratorRuntime.awrap(fetch('https://www.googleapis.com/userinfo/v2/me',{headers:{Authorization:\"Bearer \"+logInResult.accessToken}}));case 17:userInfoResponse=_context.sent;_context.next=20;return _regeneratorRuntime.awrap(userInfoResponse.json());case 20:userInfo=_context.sent;return _context.abrupt(\"return\",{type:'success',accessToken:logInResult.accessToken,idToken:logInResult.idToken,refreshToken:logInResult.refreshToken,user:{id:userInfo.id,name:userInfo.name,givenName:userInfo.given_name,familyName:userInfo.family_name,photoUrl:userInfo.picture,email:userInfo.email}});case 24:_context.prev=24;_context.t0=_context[\"catch\"](11);message=_context.t0.message.toLowerCase();if(!(message.includes('user cancelled')||message.includes('error -3'))){_context.next=29;break;}return _context.abrupt(\"return\",{type:'cancel'});case 29:throw _context.t0;case 30:case\"end\":return _context.stop();}}},null,null,[[11,24]],Promise);}export function logOutAsync(_ref){var accessToken,inputConfig,guid,clientId,config;return _regeneratorRuntime.async(function logOutAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:accessToken=_ref.accessToken,inputConfig=_objectWithoutProperties(_ref,_excluded);guid=getPlatformGUID(inputConfig);clientId=guid+\".apps.googleusercontent.com\";config={issuer:'https://accounts.google.com',clientId:clientId};_context2.next=6;return _regeneratorRuntime.awrap(AppAuth.revokeAsync(config,{token:accessToken,isClientIdProvided:!!clientId}));case 6:return _context2.abrupt(\"return\",_context2.sent);case 7:case\"end\":return _context2.stop();}}},null,null,null,Promise);}","map":{"version":3,"sources":["../src/Google.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport * as AppAuth from 'expo-app-auth';\nimport Constants from 'expo-constants';\nimport { Platform } from 'react-native';\n\nconst isInExpo = Constants.appOwnership === 'expo';\nexport type GoogleLogInConfig = {\n  /**\n   * Used in the Expo Play Store client app on Android (development only).\n   *\n   * - Create an Android OAuth Client ID from the [Credentials Page](https://console.developers.google.com/apis/credentials).\n   * - Run `openssl rand -base64 32 | openssl sha1 -c` in your terminal, it will output a string that looks like A1:B2:C3 but longer.\n   * - Paste the output from the previous step into the \"Signing-certificate fingerprint\" text field.\n   * - Use `host.exp.exponent` as the \"Package name\".\n   */\n  androidClientId?: string;\n  /**\n   * Used in the Expo App Store client app on iOS (development only).\n   *\n   * - Select \"iOS Application\" as the Application Type from the [Credentials Page](https://console.developers.google.com/apis/credentials).\n   * - Use `host.exp.exponent` as the bundle identifier.\n   */\n  iosClientId?: string;\n  /**\n   * Used in your custom Android app (production).\n   * Visit the docs page [Deploying to a standalone app on Android](https://docs.expo.io/versions/latest/sdk/google/#deploying-to-a-standalone-app-on-android) for more info.\n   */\n  androidStandaloneAppClientId?: string;\n  /**\n   * Used in your custom iOS app (production).\n   * Visit the docs page [Deploying to a standalone app on iOS](https://docs.expo.io/versions/latest/sdk/google/#deploying-to-a-standalone-app-on-ios) for more info.\n   */\n  iosStandaloneAppClientId?: string;\n  /**\n   * @deprecated [learn more here](https://docs.expo.io/versions/latest/sdk/google/#server-side-apis).\n   */\n  webClientId?: string;\n  /**\n   * System authentication is very different from web auth.\n   * All system functionality has been moved to expo-google-sign-in\n   */\n  behavior?: 'system' | 'web';\n  scopes?: string[];\n  /**\n   * Optionally you can define your own redirect URL.\n   * If this isn't defined then it will be infered from the correct client ID.\n   */\n  redirectUrl?: string;\n  /**\n   * Language for the sign in UI, in the form of ISO 639-1 language code optionally followed by a dash\n   * and ISO 3166-1 alpha-2 region code, such as 'it' or 'pt-PT'.\n   * Only set this value if it's different from the system default (which you can access via expo-localization).\n   */\n  language?: string;\n  /**\n   * If the user's email address is known ahead of time, it can be supplied to be the default option.\n   * If the user has approved access for this app in the past then auth may return without any further interaction.\n   */\n  loginHint?: string;\n  /**\n   * If no other client IDs are defined this will be used.\n   */\n  clientId?: string;\n};\n\nexport type GoogleUser = {\n  id?: string;\n  name?: string;\n  givenName?: string;\n  familyName?: string;\n  photoUrl?: string;\n  email?: string;\n};\n\nexport type LogInResult =\n  | {\n      type: 'cancel';\n    }\n  | {\n      type: 'success';\n      accessToken: string | null;\n      idToken: string | null;\n      refreshToken: string | null;\n      user: GoogleUser;\n    };\n\nexport function getPlatformGUID(config: GoogleLogInConfig) {\n  const { clientId } = config;\n\n  const iosClientId = isInExpo ? config.iosClientId : config.iosStandaloneAppClientId;\n  const androidClientId = isInExpo ? config.androidClientId : config.androidStandaloneAppClientId;\n\n  const platformClientId =\n    Platform.select({\n      ios: iosClientId,\n      android: androidClientId,\n      default: config.clientId,\n    }) || clientId;\n\n  if (\n    typeof iosClientId === 'string' &&\n    typeof androidClientId === 'string' &&\n    iosClientId === androidClientId\n  ) {\n    throw new CodedError(\n      'ERR_GOOGLE_CONFIG',\n      'Keys for Android and iOS cannot be the same value. Ensure you are linking the client IDs matching the given platforms in the Google APIs console: https://console.developers.google.com/apis/credentials'\n    );\n  }\n\n  if (!platformClientId) {\n    throw new CodedError(\n      'ERR_GOOGLE_CONFIG',\n      'Please provide the appropriate client ID. See the documentation for more details https://docs.expo.io/versions/latest/sdk/google/#loginasync'\n    );\n  }\n\n  const guid = guidFromClientId(platformClientId);\n  return guid;\n}\n\nconst PROJECT_ID_LENGTH = 32;\n\nfunction isValidGUID(guid: string) {\n  const components = guid.split('-');\n  if (components.length !== 2) {\n    return {\n      isValid: false,\n      reason: `\\`${guid}\\` must be a string of numbers and an alphanumeric string ${PROJECT_ID_LENGTH} characters long, joined with a hyphen.`,\n    };\n  }\n  const projectNumber = components[0];\n  const projectId = components[1];\n  if (isNaN(+projectNumber)) {\n    const hashedProjectId = Array(PROJECT_ID_LENGTH).fill('x');\n    return {\n      isValid: false,\n      reason: `\\`${projectNumber}-${hashedProjectId}\\` project number must be a string of numbers.`,\n    };\n  }\n  if (!projectId.match('^[a-zA-Z0-9]+$')) {\n    const hashedProjectNumber = Array(projectNumber.length).fill('x');\n    return {\n      isValid: false,\n      reason: `\\`${hashedProjectNumber}-${projectId}\\` project ID must be an alphanumeric string ${PROJECT_ID_LENGTH} characters long.`,\n    };\n  }\n\n  return { isValid: true };\n}\n\nfunction guidFromClientId(clientId: string): string {\n  const clientIdComponents = clientId.split('.').filter(component => component.includes('-'));\n\n  const guid = clientIdComponents[0];\n  const { isValid, reason } = isValidGUID(guid);\n  if (!isValid) {\n    throw new CodedError(\n      'ERR_GOOGLE_GUID',\n      reason + ' Please ensure you copied the client ID correctly.'\n    );\n  }\n\n  return guid;\n}\n\n/**\n * Prompts the user to log into Google and grants your app permission to access some of their Google data, as specified by the scopes.\n *\n * Get started in:\n * - [**Expo Client**](https://docs.expo.io/versions/latest/sdk/google/#using-it-inside-of-the-expo-app)\n * - [**Standalone**](https://docs.expo.io/versions/latest/sdk/google/#deploying-to-a-standalone-app-on-ios)\n *\n * @param config\n */\nexport async function logInAsync(config: GoogleLogInConfig): Promise<LogInResult> {\n  if (config.behavior !== undefined) {\n    console.warn(\n      \"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior. `behavior` deprecated in SDK 34\"\n    );\n  }\n\n  if (config.webClientId !== undefined) {\n    console.warn(\n      'Deprecated: You will need to use expo-google-sign-in to do server side authentication outside of the Expo client'\n    );\n  }\n\n  const userDefinedScopes = config.scopes || [];\n  /* Add the required scopes for returning profile data. */\n  const requiredScopes = [...userDefinedScopes, 'profile', 'email', 'openid'];\n  /* Remove duplicates */\n  const scopes = [...new Set(requiredScopes)];\n\n  const guid = getPlatformGUID(config);\n\n  const clientId = `${guid}.apps.googleusercontent.com`;\n  const redirectUrl = config.redirectUrl\n    ? config.redirectUrl\n    : `${AppAuth.OAuthRedirect}:/oauth2redirect/google`;\n\n  const extras: Record<string, string> = {};\n  if (config.language) {\n    // The OpenID property `ui_locales` doesn't seem to work as expected,\n    // but `hl` will work to change the UI language.\n    // Reference: https://github.com/googleapis/google-api-nodejs-client/blob/9d0dd2b6fa03c5e32efb0e39daac6291ebad2c3d/src/apis/customsearch/v1.ts#L230\n    extras.hl = config.language;\n  }\n  if (config.loginHint) {\n    // Reference https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n    extras.login_hint = config.loginHint;\n  }\n\n  try {\n    const logInResult = await AppAuth.authAsync({\n      issuer: 'https://accounts.google.com',\n      scopes,\n      redirectUrl,\n      clientId,\n      additionalParameters: extras,\n    });\n\n    // Web login only returns an accessToken so use it to fetch the same info as the native login\n    // does.\n    const userInfoResponse = await fetch('https://www.googleapis.com/userinfo/v2/me', {\n      headers: { Authorization: `Bearer ${logInResult.accessToken}` },\n    });\n    const userInfo = await userInfoResponse.json();\n\n    return {\n      type: 'success',\n      accessToken: logInResult.accessToken,\n      idToken: logInResult.idToken,\n      refreshToken: logInResult.refreshToken,\n      user: {\n        id: userInfo.id,\n        name: userInfo.name,\n        givenName: userInfo.given_name,\n        familyName: userInfo.family_name,\n        photoUrl: userInfo.picture,\n        email: userInfo.email,\n      },\n    };\n  } catch (error) {\n    const message = (error.message as string).toLowerCase();\n    // Error code -3 is the native error code for user cancel on iOS\n    if (message.includes('user cancelled') || message.includes('error -3')) {\n      return { type: 'cancel' };\n    }\n    throw error;\n  }\n}\n\nexport async function logOutAsync({\n  accessToken,\n  ...inputConfig\n}: GoogleLogInConfig & { accessToken: string }): Promise<any> {\n  const guid = getPlatformGUID(inputConfig);\n\n  const clientId = `${guid}.apps.googleusercontent.com`;\n\n  const config = {\n    issuer: 'https://accounts.google.com',\n    clientId,\n  };\n\n  return await AppAuth.revokeAsync(config, {\n    token: accessToken,\n    isClientIdProvided: !!clientId,\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}