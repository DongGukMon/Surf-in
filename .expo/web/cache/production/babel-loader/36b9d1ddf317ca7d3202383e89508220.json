{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import React,{useState,useEffect,useContext}from'react';import Button from\"react-native-web/dist/exports/Button\";import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";import Modal from\"react-native-web/dist/exports/Modal\";import Alert from\"react-native-web/dist/exports/Alert\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import TouchableHighlight from\"react-native-web/dist/exports/TouchableHighlight\";import TextInput from\"react-native-web/dist/exports/TextInput\";import QRCode from'react-native-qrcode-svg';import*as firebase from'firebase';import firebaseInit from\"../../src/firebaseInit\";import{UserInfoContext}from\"../../src/UserInfoContext\";import{useToast}from\"react-native-toast-notifications\";import{qrContext}from\"../../navigators/StackContext\";import{addPoint}from\"../../src/firebaseCall\";firebaseInit();function QrScreen(_ref){var navigation=_ref.navigation;var _useContext=useContext(qrContext),modalHandle=_useContext.modalHandle,setModalHandle=_useContext.setModalHandle;var modalVisibleQr=modalHandle.modalVisibleQr,modalVisibleTrade=modalHandle.modalVisibleTrade,text=modalHandle.text,isTrade=modalHandle.isTrade,friendUid=modalHandle.friendUid,porintChangeListen=modalHandle.porintChangeListen;var _useContext2=useContext(UserInfoContext),userInfo=_useContext2.userInfo;var uid=userInfo.uid;var toast=useToast();var tempData=\"\";function throwToast(massage){toast.show(massage,{type:\"success\",duration:4000,offset:30,animationType:\"slide-in\"});}var actionTrade=function actionTrade(friendUid,amount){firebase.database().ref('point/'+friendUid).once('value',function(snapshot){var friendPoint=snapshot.val().totalPoint;addPoint(friendUid,friendPoint,amount,\"Trade\");});firebase.database().ref('point/'+uid).once('value',function(snapshot){var myPoint=snapshot.val().totalPoint;addPoint(uid,myPoint,-amount,\"Trade\");});navigation.goBack();throwToast(\"거래 완료!\");};useEffect(function(){firebase.database().ref('point/'+uid+'/pointLog').on('value',function(snapshot){try{if(!tempData){tempData=snapshot.val();}if(porintChangeListen&&JSON.stringify(snapshot.val())!==JSON.stringify(tempData)){tempData=snapshot.val();var recentChange=Object.values(snapshot.val());var recentChange=recentChange[recentChange.length-1];switch(recentChange.action){case\"Friend\":setModalHandle(_objectSpread(_objectSpread({},modalHandle),{},{modalVisibleTrade:false,modalVisibleQr:false,porintChangeListen:false}));throwToast(\"적립 완료!\");return;case\"Trade\":setModalHandle(_objectSpread(_objectSpread({},modalHandle),{},{modalVisibleTrade:false,modalVisibleQr:false,isTrade:false,porintChangeListen:false}));throwToast(\"거래 완료!\");return;default:setModalHandle(_objectSpread(_objectSpread({},modalHandle),{},{porintChangeListen:false}));alert(recentChange.action);}}}catch(error){console.log(error);}});return function(){firebase.database().ref('point/'+uid+'/pointLog').off();};},[modalVisibleQr,tempData,porintChangeListen]);return React.createElement(View,{style:styles.centeredView},React.createElement(Modal,{transparent:true,visible:modalVisibleQr,onRequestClose:function onRequestClose(){Alert.alert('Modal has been closed.');}},React.createElement(View,{style:styles.centeredView},React.createElement(View,{style:styles.modalView},React.createElement(Text,null,isTrade?React.createElement(QRCode,{value:uid+\"&Trade\",size:170}):React.createElement(QRCode,{value:uid+\"&Friend\",size:170}),\";\"),React.createElement(TouchableHighlight,{style:_objectSpread(_objectSpread({},styles.openButton),{},{backgroundColor:'#2196F3',marginTop:17,marginBottom:-10}),onPress:function onPress(){setModalHandle(_objectSpread(_objectSpread({},modalHandle),{},{modalVisibleQr:false,isTrade:false}));}},React.createElement(Text,{style:styles.textStyle},\"\\uB2EB\\uAE30\"))))),React.createElement(Modal,{transparent:true,visible:modalVisibleTrade,onRequestClose:function onRequestClose(){Alert.alert('Modal has been closed.');}},React.createElement(View,{style:styles.centeredView},React.createElement(View,{style:styles.modalView},React.createElement(TextInput,{placeholder:\"\\uC5BC\\uB9C8\\uC904\\uAC70\\uC57C\",value:text,onChangeText:function onChangeText(text){setModalHandle(_objectSpread(_objectSpread({},modalHandle),{},{text:text}));}}),React.createElement(Button,{title:\"\\uC81C\\uCD9C\",onPress:text>0?function(){setModalHandle(_objectSpread(_objectSpread({},modalHandle),{},{modalVisibleTrade:false,isTrade:false,text:\"\",friendUid:\"\"}));actionTrade(friendUid,text);}:function(){alert(\"올바른 금액을 입력해주세요\");}}),React.createElement(TouchableHighlight,{style:_objectSpread(_objectSpread({},styles.openButton),{},{backgroundColor:'#2196F3',marginTop:17,marginBottom:-10}),onPress:function onPress(){setModalHandle(_objectSpread(_objectSpread({},modalHandle),{},{modalVisibleTrade:false,text:\"\"}));}},React.createElement(Text,{style:styles.textStyle},\"\\uB2EB\\uAE30\"))))),React.createElement(View,{style:styles.centeredView},React.createElement(Button,{title:\"Get Friends\",onPress:function onPress(){setModalHandle(_objectSpread(_objectSpread({},modalHandle),{},{modalVisibleQr:true,isTrade:false,porintChangeListen:true}));}}),React.createElement(Button,{title:\"Trade Point\",onPress:function onPress(){setModalHandle(_objectSpread(_objectSpread({},modalHandle),{},{modalVisibleQr:true,isTrade:true,porintChangeListen:true}));}}),React.createElement(Button,{title:\"Scan\",onPress:function onPress(){setModalHandle(_objectSpread(_objectSpread({},modalHandle),{},{porintChangeListen:false}));navigation.navigate(\"QrScan\");}})));}var styles=StyleSheet.create({centeredView:{flex:1,justifyContent:'center',alignItems:'center',marginTop:22},modalView:{margin:20,backgroundColor:'white',borderRadius:20,padding:35,alignItems:'center',shadowColor:'#000',shadowOffset:{width:0,height:2},shadowOpacity:0.25,shadowRadius:3.84,elevation:5,marginBottom:80},openButton:{backgroundColor:'#F194FF',borderRadius:20,padding:10,elevation:2,paddingHorizontal:20},textStyle:{color:'white',fontWeight:'bold',textAlign:'center'},modalText:{marginBottom:15,textAlign:'center'}});export default QrScreen;","map":{"version":3,"sources":["C:/Users/Note/Desktop/surfin/screen/QrFolder/QrScreen.js"],"names":["React","useState","useEffect","useContext","QRCode","firebase","firebaseInit","UserInfoContext","useToast","qrContext","addPoint","QrScreen","navigation","modalHandle","setModalHandle","modalVisibleQr","modalVisibleTrade","text","isTrade","friendUid","porintChangeListen","userInfo","uid","toast","tempData","throwToast","massage","show","type","duration","offset","animationType","actionTrade","amount","database","ref","once","snapshot","friendPoint","val","totalPoint","myPoint","goBack","on","JSON","stringify","recentChange","Object","values","length","action","alert","error","console","log","off","styles","centeredView","Alert","modalView","openButton","backgroundColor","marginTop","marginBottom","textStyle","navigate","StyleSheet","create","flex","justifyContent","alignItems","margin","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","paddingHorizontal","color","fontWeight","textAlign","modalText"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react';\r\nimport { Button, Text, View, Modal, Alert, StyleSheet, TouchableHighlight, TextInput} from 'react-native';\r\nimport QRCode from 'react-native-qrcode-svg';\r\nimport * as firebase from 'firebase';\r\nimport firebaseInit from '../../src/firebaseInit';\r\nimport {UserInfoContext} from '../../src/UserInfoContext';\r\nimport { useToast } from \"react-native-toast-notifications\";\r\nimport {qrContext} from '../../navigators/StackContext';\r\nimport {addPoint} from '../../src/firebaseCall';\r\n\r\n\r\nfirebaseInit();\r\n\r\n\r\nfunction QrScreen({ navigation }) {\r\n\r\n  const {modalHandle, setModalHandle} = useContext(qrContext);\r\n  const {modalVisibleQr,modalVisibleTrade,text,isTrade,friendUid,porintChangeListen} = modalHandle;\r\n\r\n  const {userInfo} = useContext(UserInfoContext);\r\n  const {uid} = userInfo\r\n\r\n  const toast = useToast();\r\n\r\n  var tempData = \"\";\r\n\r\n  function throwToast(massage){\r\n    toast.show(massage,{\r\n      type: \"success\",\r\n      duration: 4000,\r\n      offset: 30,\r\n      animationType: \"slide-in\",\r\n    });\r\n  }\r\n\r\n  const actionTrade = (friendUid, amount) => {\r\n    \r\n    firebase.database().ref('point/' + friendUid).once('value', (snapshot) => {\r\n      const friendPoint = snapshot.val().totalPoint;\r\n      addPoint(friendUid,friendPoint,amount,\"Trade\")\r\n    })\r\n    firebase.database().ref('point/' + uid).once('value', (snapshot) => {\r\n      const myPoint = snapshot.val().totalPoint;\r\n      addPoint(uid,myPoint,-amount,\"Trade\")\r\n    })\r\n    navigation.goBack()\r\n    throwToast(\"거래 완료!\");\r\n  }\r\n\r\n\r\n  useEffect(() =>{\r\n    firebase.database().ref('point/' + uid + '/pointLog')\r\n    .on('value', (snapshot) => {\r\n      try {\r\n        if (!tempData){\r\n          tempData = snapshot.val()\r\n        }\r\n\r\n        if(porintChangeListen && (JSON.stringify(snapshot.val()) !== JSON.stringify(tempData))){\r\n          \r\n          tempData = snapshot.val()\r\n          var recentChange = Object.values(snapshot.val())\r\n          var recentChange = recentChange[recentChange.length-1]\r\n      \r\n          switch (recentChange.action){\r\n            case \"Friend\":\r\n              setModalHandle({...modalHandle, modalVisibleTrade:false,modalVisibleQr:false, porintChangeListen:false});\r\n              throwToast(\"적립 완료!\")\r\n              return;\r\n            case \"Trade\":\r\n              setModalHandle({...modalHandle, modalVisibleTrade:false,modalVisibleQr:false, isTrade:false, porintChangeListen:false});\r\n              throwToast(\"거래 완료!\")\r\n              return;\r\n            default:\r\n              setModalHandle({...modalHandle, porintChangeListen:false});\r\n              alert(recentChange.action);\r\n          }\r\n      }\r\n        } catch (error){\r\n          console.log(error)\r\n        } \r\n      }\r\n    )\r\n  return () => {\r\n    firebase.database().ref('point/' + uid + '/pointLog').off()\r\n  };\r\n  },[modalVisibleQr,tempData,porintChangeListen])\r\n\r\n    \r\n  return (\r\n    \r\n    <View style = {styles.centeredView}>\r\n\r\n      <Modal\r\n        transparent={true}\r\n        visible={modalVisibleQr}\r\n        onRequestClose={() => {\r\n          Alert.alert('Modal has been closed.');\r\n        }}>\r\n        <View style={styles.centeredView}>\r\n          <View style={styles.modalView}>\r\n            <Text>\r\n              {(isTrade) ? \r\n              <QRCode value={uid+\"&Trade\"} size={170}/> : <QRCode value={uid+\"&Friend\"} size={170}/>\r\n              };\r\n            </Text>\r\n            <TouchableHighlight\r\n              style={{ ...styles.openButton, backgroundColor: '#2196F3', marginTop: 17, marginBottom: -10 }}\r\n              onPress={() => {setModalHandle({...modalHandle,modalVisibleQr:false, isTrade:false});}}>\r\n              <Text style={styles.textStyle}>닫기</Text>\r\n            </TouchableHighlight>\r\n          </View>\r\n        </View>\r\n      </Modal>\r\n\r\n          <Modal\r\n            transparent={true}\r\n            visible={modalVisibleTrade}\r\n            onRequestClose={() => {\r\n              Alert.alert('Modal has been closed.');\r\n            }}>\r\n              <View style={styles.centeredView}>\r\n                <View style={styles.modalView}>\r\n                  <TextInput placeholder=\"얼마줄거야\" value={text} onChangeText={(text)=>{setModalHandle({...modalHandle, text:text})}}/>\r\n                  <Button title =\"제출\" onPress={text>0 ? ()=>{\r\n                    setModalHandle({...modalHandle,modalVisibleTrade:false,isTrade:false,text:\"\",friendUid:\"\"});\r\n                    actionTrade(friendUid,text)\r\n                  }\r\n                    : ()=>{alert(\"올바른 금액을 입력해주세요\")}}/>\r\n                  <TouchableHighlight\r\n                    style={{ ...styles.openButton, backgroundColor: '#2196F3', marginTop: 17, marginBottom: -10 }}\r\n                    onPress={() => {\r\n                      setModalHandle({...modalHandle,modalVisibleTrade:false, text:\"\"});\r\n                    }}>\r\n                    <Text style={styles.textStyle}>닫기</Text>\r\n                  </TouchableHighlight>\r\n                </View>\r\n              </View>\r\n          </Modal>\r\n\r\n        <View style={styles.centeredView}>\r\n        <Button title=\"Get Friends\" onPress={()=>{setModalHandle({...modalHandle, modalVisibleQr:true, isTrade:false, porintChangeListen:true})}}></Button>\r\n        <Button title=\"Trade Point\" onPress={()=>{setModalHandle({...modalHandle, modalVisibleQr:true, isTrade:true, porintChangeListen:true })}}></Button>\r\n        <Button\r\n          title=\"Scan\"\r\n          onPress={() => {\r\n            setModalHandle({...modalHandle, porintChangeListen:false});\r\n            navigation.navigate(\"QrScan\");\r\n          }}\r\n        />\r\n        </View>\r\n  </View>\r\n  \r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  centeredView: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginTop: 22,\r\n  },\r\n  modalView: {\r\n    margin: 20,\r\n    backgroundColor: 'white',\r\n    borderRadius: 20,\r\n    padding: 35,\r\n    alignItems: 'center',\r\n    shadowColor: '#000',\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n    elevation: 5,\r\n    marginBottom: 80\r\n  },\r\n  openButton: {\r\n    backgroundColor: '#F194FF',\r\n    borderRadius: 20,\r\n    padding: 10,\r\n    elevation: 2,\r\n    paddingHorizontal: 20\r\n  },\r\n  textStyle: {\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n  modalText: {\r\n    marginBottom: 15,\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default QrScreen;"]},"metadata":{},"sourceType":"module"}