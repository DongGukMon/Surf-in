{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import React,{useEffect,useState,useContext}from'react';import ActivityIndicator from\"react-native-web/dist/exports/ActivityIndicator\";import Button from\"react-native-web/dist/exports/Button\";import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";import Timer from\"../../src/Timer\";import firebaseInit from\"../../src/firebaseInit\";import firebase from'firebase';import{UserInfoContext}from\"../../src/UserInfoContext\";firebaseInit();function StoreScreen(_ref){var navigation=_ref.navigation;var _useState=useState(new Date()),_useState2=_slicedToArray(_useState,2),nowTime=_useState2[0],setNowTime=_useState2[1];var _useContext=useContext(UserInfoContext),userInfo=_useContext.userInfo,setUserInfo=_useContext.setUserInfo;var uid=userInfo.uid,point=userInfo.point;useEffect(function(){firebase.database().ref('point/'+uid).on('value',function(snapshot){if(snapshot.val()){var myPoint=snapshot.val().totalPoint;setUserInfo(_objectSpread(_objectSpread({},userInfo),{},{point:myPoint}));}else{alert(\"DB에 접근할 수 없습니다.\");}});var timeInterval=setInterval(function(){setNowTime(new Date());},1000);return function(){clearInterval(timeInterval);};},[]);return React.createElement(View,{style:{flex:1,justifyContent:'center',alignItems:'center'}},point?React.createElement(Text,null,\"point: \",point):React.createElement(ActivityIndicator,null),React.createElement(Button,{title:\"\\uD3EC\\uC778\\uD2B8\\uB0B4\\uC5ED\",onPress:function onPress(){return navigation.navigate(\"PointScreen\");}}),React.createElement(Text,null,\"Comming Soon\"),React.createElement(Text,null,React.createElement(Timer,{nowDate:nowTime})));}export default StoreScreen;","map":{"version":3,"sources":["C:/Users/Note/Desktop/surfin/screen/StoreFolder/StoreScreen.js"],"names":["React","useEffect","useState","useContext","Timer","firebaseInit","firebase","UserInfoContext","StoreScreen","navigation","Date","nowTime","setNowTime","userInfo","setUserInfo","uid","point","database","ref","on","snapshot","val","myPoint","totalPoint","alert","timeInterval","setInterval","clearInterval","flex","justifyContent","alignItems","navigate"],"mappings":"k6BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,CAAqCC,UAArC,KAAsD,OAAtD,C,kPAEA,MAAOC,CAAAA,KAAP,uBACA,MAAOC,CAAAA,YAAP,8BACA,MAAOC,CAAAA,QAAP,KAAqB,UAArB,CACA,OAAQC,eAAR,iCAGAF,YAAY,GAEZ,QAASG,CAAAA,WAAT,MAAmC,IAAbC,CAAAA,UAAa,MAAbA,UAAa,CAE/B,cAA8BP,QAAQ,CAAC,GAAIQ,CAAAA,IAAJ,EAAD,CAAtC,wCAAOC,OAAP,eAAgBC,UAAhB,eACA,gBAAgCT,UAAU,CAACI,eAAD,CAA1C,CAAOM,QAAP,aAAOA,QAAP,CAAiBC,WAAjB,aAAiBA,WAAjB,CACA,GAAOC,CAAAA,GAAP,CAAqBF,QAArB,CAAOE,GAAP,CAAYC,KAAZ,CAAqBH,QAArB,CAAYG,KAAZ,CAEAf,SAAS,CAAC,UAAK,CACXK,QAAQ,CAACW,QAAT,GAAoBC,GAApB,CAAwB,SAAWH,GAAnC,EACCI,EADD,CACI,OADJ,CACa,SAACC,QAAD,CAAc,CACzB,GAAGA,QAAQ,CAACC,GAAT,EAAH,CAAmB,CACjB,GAAMC,CAAAA,OAAO,CAAGF,QAAQ,CAACC,GAAT,GAAeE,UAA/B,CACAT,WAAW,gCAAKD,QAAL,MAAeG,KAAK,CAACM,OAArB,GAAX,CACC,CAHH,IAGS,CACLE,KAAK,CAAC,iBAAD,CAAL,CACH,CACA,CARH,EAUA,GAAMC,CAAAA,YAAY,CAAGC,WAAW,CAAC,UAAM,CACnCd,UAAU,CAAC,GAAIF,CAAAA,IAAJ,EAAD,CAAV,CACD,CAF6B,CAE3B,IAF2B,CAAhC,CAIA,MAAO,WAAK,CACViB,aAAa,CAACF,YAAD,CAAb,CACD,CAFD,CAGH,CAlBQ,CAkBP,EAlBO,CAAT,CAoBF,MACE,qBAAC,IAAD,EAAM,KAAK,CAAE,CAAEG,IAAI,CAAE,CAAR,CAAWC,cAAc,CAAE,QAA3B,CAAqCC,UAAU,CAAE,QAAjD,CAAb,EACGd,KAAK,CAAI,oBAAC,IAAD,gBAAcA,KAAd,CAAJ,CAAmC,oBAAC,iBAAD,MAD3C,CAEE,oBAAC,MAAD,EACI,KAAK,CAAC,gCADV,CAEI,OAAO,CAAE,yBAAMP,CAAAA,UAAU,CAACsB,QAAX,CAAoB,aAApB,CAAN,EAFb,EAFF,CAME,oBAAC,IAAD,qBANF,CAOE,oBAAC,IAAD,MAAM,oBAAC,KAAD,EAAO,OAAO,CAAGpB,OAAjB,EAAN,CAPF,CADF,CAWD,CAED,cAAeH,CAAAA,WAAf","sourcesContent":["import React, { useEffect, useState, useContext} from 'react';\r\nimport { ActivityIndicator, Button, Text, View } from 'react-native';\r\nimport Timer from '../../src/Timer'\r\nimport firebaseInit from '../../src/firebaseInit';\r\nimport firebase from 'firebase';\r\nimport {UserInfoContext} from '../../src/UserInfoContext';\r\n\r\n\r\nfirebaseInit()\r\n\r\nfunction StoreScreen({navigation}) {\r\n\r\n    const [nowTime, setNowTime] = useState(new Date())\r\n    const {userInfo, setUserInfo} = useContext(UserInfoContext);\r\n    const {uid, point} = userInfo\r\n\r\n    useEffect(() =>{\r\n        firebase.database().ref('point/' + uid)\r\n        .on('value', (snapshot) => {\r\n          if(snapshot.val()) {\r\n            const myPoint = snapshot.val().totalPoint;\r\n            setUserInfo({...userInfo, point:myPoint});\r\n            } else {\r\n              alert(\"DB에 접근할 수 없습니다.\") \r\n          } \r\n          }\r\n        )\r\n        const timeInterval = setInterval(() => {\r\n            setNowTime(new Date());\r\n          }, 1000);\r\n          \r\n        return ()=> {\r\n          clearInterval(timeInterval)\r\n        }\r\n    },[])\r\n\r\n  return (\r\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n      {point ? (<Text>point: {point}</Text>) : <ActivityIndicator/>}\r\n      <Button\r\n          title=\"포인트내역\"\r\n          onPress={() => navigation.navigate(\"PointScreen\")}\r\n        />\r\n      <Text>Comming Soon</Text>\r\n      <Text><Timer nowDate ={nowTime}/></Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default StoreScreen;"]},"metadata":{},"sourceType":"module"}