{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{CodedError,Platform,SyntheticPlatformEmitter}from'@unimodules/core';import Constants from'expo-constants';export default function getDevicePushTokenAsync(){var data;return _regeneratorRuntime.async(function getDevicePushTokenAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(_subscribeDeviceToPushNotificationsAsync());case 2:data=_context.sent;SyntheticPlatformEmitter.emit('onDevicePushToken',{devicePushToken:data});return _context.abrupt(\"return\",{type:Platform.OS,data:data});case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);}function guardPermission(){if(!('Notification'in window)){throw new CodedError('ERR_UNAVAILABLE','The Web Notifications API is not available on this device.');}if(!navigator.serviceWorker){throw new CodedError('ERR_UNAVAILABLE','Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');}if(Notification.permission!=='granted'){throw new CodedError('ERR_NOTIFICATIONS_PERMISSION_DENIED',\"Cannot use web notifications without permissions granted. Request permissions with \\\"expo-permissions\\\".\");}}function _subscribeDeviceToPushNotificationsAsync(){var _Constants$manifest$n,_Constants$manifest$n2,_Constants$manifest;var registration,subscribeOptions,pushSubscription,pushSubscriptionJson,subscriptionObject,notificationIcon;return _regeneratorRuntime.async(function _subscribeDeviceToPushNotificationsAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if((_Constants$manifest$n=Constants.manifest.notification)!=null&&_Constants$manifest$n.vapidPublicKey){_context2.next=2;break;}throw new CodedError('ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG','You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');case 2:if((_Constants$manifest$n2=Constants.manifest.notification)!=null&&_Constants$manifest$n2.serviceWorkerPath){_context2.next=4;break;}throw new CodedError('ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION','You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.');case 4:guardPermission();registration=null;_context2.prev=6;_context2.next=9;return _regeneratorRuntime.awrap(navigator.serviceWorker.register(Constants.manifest.notification.serviceWorkerPath));case 9:registration=_context2.sent;_context2.next=15;break;case 12:_context2.prev=12;_context2.t0=_context2[\"catch\"](6);throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\"Could not register this device for push notifications because the service worker (\"+Constants.manifest.notification.serviceWorkerPath+\") could not be registered: \"+_context2.t0);case 15:_context2.next=17;return _regeneratorRuntime.awrap(navigator.serviceWorker.ready);case 17:if(registration.active){_context2.next=19;break;}throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED','Could not register this device for push notifications because the service worker is not active.');case 19:subscribeOptions={userVisibleOnly:true,applicationServerKey:_urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey)};pushSubscription=null;_context2.prev=21;_context2.next=24;return _regeneratorRuntime.awrap(registration.pushManager.subscribe(subscribeOptions));case 24:pushSubscription=_context2.sent;_context2.next=30;break;case 27:_context2.prev=27;_context2.t1=_context2[\"catch\"](21);throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED','The device was unable to register for remote notifications with the browser endpoint. ('+_context2.t1+')');case 30:pushSubscriptionJson=pushSubscription.toJSON();subscriptionObject={endpoint:pushSubscriptionJson.endpoint,keys:{p256dh:pushSubscriptionJson.keys.p256dh,auth:pushSubscriptionJson.keys.auth}};notificationIcon=(((_Constants$manifest=Constants.manifest)==null?void 0:_Constants$manifest.notification)||{}).icon;_context2.next=35;return _regeneratorRuntime.awrap(registration.active.postMessage(JSON.stringify({fromExpoWebClient:{notificationIcon:notificationIcon}})));case 35:return _context2.abrupt(\"return\",subscriptionObject);case 36:case\"end\":return _context2.stop();}}},null,null,[[6,12],[21,27]],Promise);}function _urlBase64ToUint8Array(base64String){var padding='='.repeat((4-base64String.length%4)%4);var base64=(base64String+padding).replace(/-/g,'+').replace(/_/g,'/');var rawData=window.atob(base64);var outputArray=new Uint8Array(rawData.length);for(var i=0;i<rawData.length;++i){outputArray[i]=rawData.charCodeAt(i);}return outputArray;}","map":{"version":3,"sources":["../src/getDevicePushTokenAsync.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, Platform, SyntheticPlatformEmitter } from '@unimodules/core';\nimport Constants from 'expo-constants';\n\nimport { DevicePushToken } from './Tokens.types';\n\nexport default async function getDevicePushTokenAsync(): Promise<DevicePushToken> {\n  const data = await _subscribeDeviceToPushNotificationsAsync();\n  SyntheticPlatformEmitter.emit('onDevicePushToken', { devicePushToken: data });\n  return { type: Platform.OS, data };\n}\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'The Web Notifications API is not available on this device.'\n    );\n  }\n  if (!navigator.serviceWorker) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PERMISSION_DENIED',\n      `Cannot use web notifications without permissions granted. Request permissions with \"expo-permissions\".`\n    );\n  }\n}\n\nasync function _subscribeDeviceToPushNotificationsAsync(): Promise<DevicePushToken['data']> {\n  // @ts-ignore: TODO: not on the schema\n  if (!Constants.manifest.notification?.vapidPublicKey) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n  // @ts-ignore: TODO: not on the schema\n  if (!Constants.manifest.notification?.serviceWorkerPath) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION',\n      'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.'\n    );\n  }\n  guardPermission();\n\n  let registration: ServiceWorkerRegistration | null = null;\n  try {\n    registration = await navigator.serviceWorker.register(\n      // @ts-ignore: TODO: not on the schema\n      Constants.manifest.notification.serviceWorkerPath\n    );\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      // @ts-ignore: TODO: not on the schema\n      `Could not register this device for push notifications because the service worker (${Constants.manifest.notification.serviceWorkerPath}) could not be registered: ${error}`\n    );\n  }\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'Could not register this device for push notifications because the service worker is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    // @ts-ignore: TODO: not on the schema\n    applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey),\n  };\n  let pushSubscription: PushSubscription | null = null;\n  try {\n    pushSubscription = await registration.pushManager.subscribe(subscribeOptions);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'The device was unable to register for remote notifications with the browser endpoint. (' +\n        error +\n        ')'\n    );\n  }\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  const notificationIcon = (Constants.manifest?.notification || {}).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}